# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataSet
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataSet
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataSet
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different DataSet implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://kedro.readthedocs.io/en/stable/data/data_catalog.html
#
# This is a data set used by the iris classification example pipeline provided with this starter
# template. Please feel free to remove it once you remove the example pipeline.

flights:
  type: spark.SparkDataSet
  filepath: /dbfs/FileStore/On_Time_Reporting_Carrier_On_Time_Performance__1987_present__2019_3_csv.gz
  file_format: csv
  load_args:
    header: True
    inferSchema: True
  save_args:
    header: True

flights_reduced:
  type: spark.SparkDataSet
  filepath: /dbfs/FileStore/flight_delays/data/02_intermediate/on_time_reporting_reduced.csv.gz
  file_format: csv
  load_args:
    header: True
    inferSchema: True
  save_args:
    header: True
    mode: overwrite

flights_extra:
  type: spark.SparkDataSet
  filepath: /dbfs/FileStore/flight_delays/data/04_feature/flights_delayed.csv.gz
  file_format: csv
  load_args:
    header: True
    inferSchema: True
  save_args:
    header: True
    mode: overwrite
# We need to set mode to 'overwrite' in save_args so when saving the dataset it is replaced each time it is run
# for all SparkDataSets.
data_train:
  type: spark.SparkDataSet
  filepath: /dbfs/FileStore/flight_delays/data/02_intermediate/data_train.parquet
  save_args:
    mode: overwrite

data_test:
  type: spark.SparkDataSet
  filepath: /dbfs/FileStore/flight_delays/data/02_intermediate/data_test.parquet
  save_args:
    mode: overwrite

test_with_pred:
  type: spark.SparkDataSet
  filepath: /dbfs/FileStore/flight_delays/data/07_model_output/data_test_w_pred.parquet
  save_args:
    mode: overwrite

# This is an example how to use `MemoryDataSet` with Spark objects that aren't `DataFrame`'s.
# In particular, the `assign` copy mode ensures that the `MemoryDataSet` will be assigned
# the Spark object itself, not a deepcopy version of it, since deepcopy doesn't work with
# Spark object generally.
pipeline_classifier:
  type: MemoryDataSet
  copy_mode: assign
